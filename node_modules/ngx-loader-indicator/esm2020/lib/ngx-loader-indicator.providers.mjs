import { makeEnvironmentProviders } from '@angular/core';
import { NGX_LOADER_INDICATOR_CONFIG, INITIAL_CONFIG, initialConfig, NEW_CONFIG, } from './ngx-loader-indicator.config';
export function _configFactory(initConfig, configValue) {
    const loaderStyles = configValue
        ? configValue.loaderStyles
        : null;
    const imgStyles = configValue ? configValue.imgStyles : null;
    const rotate = configValue ? configValue.rotate : null;
    return {
        ...initConfig,
        ...configValue,
        loaderStyles: { ...initConfig.loaderStyles, ...loaderStyles },
        imgStyles: { ...initConfig.imgStyles, ...imgStyles },
        rotate: { ...initConfig.rotate, ...rotate },
    };
}
export function provideNgxLoaderIndicator(configValue) {
    return [
        {
            provide: NEW_CONFIG,
            useValue: configValue,
        },
        {
            provide: INITIAL_CONFIG,
            useValue: initialConfig,
        },
        {
            provide: NGX_LOADER_INDICATOR_CONFIG,
            useFactory: _configFactory,
            deps: [INITIAL_CONFIG, NEW_CONFIG],
        },
    ];
}
export function provideEnvironmentNgxLoaderIndicator(configValue) {
    return makeEnvironmentProviders(provideNgxLoaderIndicator(configValue));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRlci1pbmRpY2F0b3IucHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWxvYWRlci1pbmRpY2F0b3ItbGliL3NyYy9saWIvbmd4LWxvYWRlci1pbmRpY2F0b3IucHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBd0Isd0JBQXdCLEVBQVksTUFBTSxlQUFlLENBQUM7QUFDekYsT0FBTyxFQUNILDJCQUEyQixFQUUzQixjQUFjLEVBQ2QsYUFBYSxFQUNiLFVBQVUsR0FFYixNQUFNLCtCQUErQixDQUFDO0FBRXZDLE1BQU0sVUFBVSxjQUFjLENBQzFCLFVBQXlCLEVBQ3pCLFdBQTBCO0lBRTFCLE1BQU0sWUFBWSxHQUFtQyxXQUFXO1FBQzVELENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWTtRQUMxQixDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ1gsTUFBTSxTQUFTLEdBQWdDLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzFGLE1BQU0sTUFBTSxHQUE2QixXQUFXLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUVqRixPQUFPO1FBQ0gsR0FBRyxVQUFVO1FBQ2IsR0FBRyxXQUFXO1FBQ2QsWUFBWSxFQUFFLEVBQUUsR0FBRyxVQUFVLENBQUMsWUFBWSxFQUFFLEdBQUcsWUFBWSxFQUFFO1FBQzdELFNBQVMsRUFBRSxFQUFFLEdBQUcsVUFBVSxDQUFDLFNBQVMsRUFBRSxHQUFHLFNBQVMsRUFBRTtRQUNwRCxNQUFNLEVBQUUsRUFBRSxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxNQUFNLEVBQUU7S0FDOUMsQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLFVBQVUseUJBQXlCLENBQ3JDLFdBQW1EO0lBRW5ELE9BQU87UUFDSDtZQUNJLE9BQU8sRUFBRSxVQUFVO1lBQ25CLFFBQVEsRUFBRSxXQUFXO1NBQ3hCO1FBQ0Q7WUFDSSxPQUFPLEVBQUUsY0FBYztZQUN2QixRQUFRLEVBQUUsYUFBYTtTQUMxQjtRQUNEO1lBQ0ksT0FBTyxFQUFFLDJCQUEyQjtZQUNwQyxVQUFVLEVBQUUsY0FBYztZQUMxQixJQUFJLEVBQUUsQ0FBQyxjQUFjLEVBQUUsVUFBVSxDQUFDO1NBQ3JDO0tBQ0osQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLFVBQVUsb0NBQW9DLENBQ2hELFdBQW1EO0lBRW5ELE9BQU8sd0JBQXdCLENBQUMseUJBQXlCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUM1RSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW52aXJvbm1lbnRQcm92aWRlcnMsIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycywgUHJvdmlkZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgTkdYX0xPQURFUl9JTkRJQ0FUT1JfQ09ORklHLFxuICAgIElDb25maWcsXG4gICAgSU5JVElBTF9DT05GSUcsXG4gICAgaW5pdGlhbENvbmZpZyxcbiAgICBORVdfQ09ORklHLFxuICAgIG9wdGlvbnNDb25maWcsXG59IGZyb20gJy4vbmd4LWxvYWRlci1pbmRpY2F0b3IuY29uZmlnJztcblxuZXhwb3J0IGZ1bmN0aW9uIF9jb25maWdGYWN0b3J5KFxuICAgIGluaXRDb25maWc6IG9wdGlvbnNDb25maWcsXG4gICAgY29uZmlnVmFsdWU6IG9wdGlvbnNDb25maWdcbik6IG9wdGlvbnNDb25maWcge1xuICAgIGNvbnN0IGxvYWRlclN0eWxlczogSUNvbmZpZ1snbG9hZGVyU3R5bGVzJ10gfCBudWxsID0gY29uZmlnVmFsdWVcbiAgICAgICAgPyBjb25maWdWYWx1ZS5sb2FkZXJTdHlsZXNcbiAgICAgICAgOiBudWxsO1xuICAgIGNvbnN0IGltZ1N0eWxlczogSUNvbmZpZ1snaW1nU3R5bGVzJ10gfCBudWxsID0gY29uZmlnVmFsdWUgPyBjb25maWdWYWx1ZS5pbWdTdHlsZXMgOiBudWxsO1xuICAgIGNvbnN0IHJvdGF0ZTogSUNvbmZpZ1sncm90YXRlJ10gfCBudWxsID0gY29uZmlnVmFsdWUgPyBjb25maWdWYWx1ZS5yb3RhdGUgOiBudWxsO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgLi4uaW5pdENvbmZpZyxcbiAgICAgICAgLi4uY29uZmlnVmFsdWUsXG4gICAgICAgIGxvYWRlclN0eWxlczogeyAuLi5pbml0Q29uZmlnLmxvYWRlclN0eWxlcywgLi4ubG9hZGVyU3R5bGVzIH0sXG4gICAgICAgIGltZ1N0eWxlczogeyAuLi5pbml0Q29uZmlnLmltZ1N0eWxlcywgLi4uaW1nU3R5bGVzIH0sXG4gICAgICAgIHJvdGF0ZTogeyAuLi5pbml0Q29uZmlnLnJvdGF0ZSwgLi4ucm90YXRlIH0sXG4gICAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVOZ3hMb2FkZXJJbmRpY2F0b3IoXG4gICAgY29uZmlnVmFsdWU/OiBvcHRpb25zQ29uZmlnIHwgKCgpID0+IG9wdGlvbnNDb25maWcpXG4pOiBQcm92aWRlcltdIHtcbiAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBORVdfQ09ORklHLFxuICAgICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZ1ZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBJTklUSUFMX0NPTkZJRyxcbiAgICAgICAgICAgIHVzZVZhbHVlOiBpbml0aWFsQ29uZmlnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBOR1hfTE9BREVSX0lORElDQVRPUl9DT05GSUcsXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBfY29uZmlnRmFjdG9yeSxcbiAgICAgICAgICAgIGRlcHM6IFtJTklUSUFMX0NPTkZJRywgTkVXX0NPTkZJR10sXG4gICAgICAgIH0sXG4gICAgXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVFbnZpcm9ubWVudE5neExvYWRlckluZGljYXRvcihcbiAgICBjb25maWdWYWx1ZT86IG9wdGlvbnNDb25maWcgfCAoKCkgPT4gb3B0aW9uc0NvbmZpZylcbik6IEVudmlyb25tZW50UHJvdmlkZXJzIHtcbiAgICByZXR1cm4gbWFrZUVudmlyb25tZW50UHJvdmlkZXJzKHByb3ZpZGVOZ3hMb2FkZXJJbmRpY2F0b3IoY29uZmlnVmFsdWUpKTtcbn1cbiJdfQ==
import { Directive, ElementRef, inject, Input, Renderer2 } from '@angular/core';
import { NGX_LOADER_INDICATOR_CONFIG } from './ngx-loader-indicator.config';
import * as i0 from "@angular/core";
export class NgxLoaderIndicatorDirective {
    constructor() {
        this._config = inject(NGX_LOADER_INDICATOR_CONFIG);
        this._el = inject(ElementRef);
        this._renderer = inject(Renderer2);
    }
    set loader(value) {
        if (!value) {
            this.loaderEl ? this._setStyles(this.loaderEl, { display: 'none' }) : null;
            return;
        }
        const { rotate, hostStyles, loaderStyles, imgStyles, img } = this._config;
        this.loaderEl = this._renderer.createElement('div');
        // tslint:disable-next-line:typedef
        const imgEl = this._renderer.createElement('img');
        imgEl.animate([{ transform: 'rotate(360deg)' }, { transform: 'rotate(0deg)' }], rotate);
        this._renderer.appendChild(this._el.nativeElement, this.loaderEl);
        this._renderer.appendChild(this.loaderEl, imgEl);
        this._setStyles(this._el.nativeElement, hostStyles);
        this._setStyles(this.loaderEl, loaderStyles);
        this._setStyles(imgEl, imgStyles);
        if (!img) {
            return;
        }
        this._renderer.setAttribute(imgEl, 'src', img);
    }
    _setStyles(element, styles) {
        if (!styles) {
            return;
        }
        Object.keys(styles).forEach((key) => {
            this._renderer.setStyle(element, key, styles[key]);
        });
    }
}
NgxLoaderIndicatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: NgxLoaderIndicatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NgxLoaderIndicatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.0.4", type: NgxLoaderIndicatorDirective, isStandalone: true, selector: "[loader]", inputs: { loader: "loader" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.4", ngImport: i0, type: NgxLoaderIndicatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[loader]',
                    standalone: true,
                }]
        }], propDecorators: { loader: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWxvYWRlci1pbmRpY2F0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWxvYWRlci1pbmRpY2F0b3ItbGliL3NyYy9saWIvbmd4LWxvYWRlci1pbmRpY2F0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSwyQkFBMkIsRUFBVyxNQUFNLCtCQUErQixDQUFDOztBQU1yRixNQUFNLE9BQU8sMkJBQTJCO0lBSnhDO1FBS3FCLFlBQU8sR0FBRyxNQUFNLENBQVUsMkJBQTJCLENBQUMsQ0FBQztRQUV2RCxRQUFHLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXpCLGNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7S0F1Q2xEO0lBbkNHLElBQ1csTUFBTSxDQUFDLEtBQWM7UUFDNUIsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDM0UsT0FBTztTQUNWO1FBQ0QsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBRTFFLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEQsbUNBQW1DO1FBQ25DLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRWxELEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFeEYsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2xFLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFakQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQUM7UUFFbEMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNOLE9BQU87U0FDVjtRQUNELElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVPLFVBQVUsQ0FBQyxPQUFvQixFQUFFLE1BQTZDO1FBQ2xGLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDVCxPQUFPO1NBQ1Y7UUFDRCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQVcsRUFBRSxFQUFFO1lBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOzt3SEEzQ1EsMkJBQTJCOzRHQUEzQiwyQkFBMkI7MkZBQTNCLDJCQUEyQjtrQkFKdkMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsVUFBVSxFQUFFLElBQUk7aUJBQ25COzhCQVdjLE1BQU07c0JBRGhCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIGluamVjdCwgSW5wdXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTkdYX0xPQURFUl9JTkRJQ0FUT1JfQ09ORklHLCBJQ29uZmlnIH0gZnJvbSAnLi9uZ3gtbG9hZGVyLWluZGljYXRvci5jb25maWcnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tsb2FkZXJdJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxufSlcbmV4cG9ydCBjbGFzcyBOZ3hMb2FkZXJJbmRpY2F0b3JEaXJlY3RpdmUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NvbmZpZyA9IGluamVjdDxJQ29uZmlnPihOR1hfTE9BREVSX0lORElDQVRPUl9DT05GSUcpO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBfZWwgPSBpbmplY3QoRWxlbWVudFJlZik7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IF9yZW5kZXJlciA9IGluamVjdChSZW5kZXJlcjIpO1xuXG4gICAgcHVibGljIGxvYWRlckVsITogSFRNTERpdkVsZW1lbnQ7XG5cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyBzZXQgbG9hZGVyKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMubG9hZGVyRWwgPyB0aGlzLl9zZXRTdHlsZXModGhpcy5sb2FkZXJFbCwgeyBkaXNwbGF5OiAnbm9uZScgfSkgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgcm90YXRlLCBob3N0U3R5bGVzLCBsb2FkZXJTdHlsZXMsIGltZ1N0eWxlcywgaW1nIH0gPSB0aGlzLl9jb25maWc7XG5cbiAgICAgICAgdGhpcy5sb2FkZXJFbCA9IHRoaXMuX3JlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHlwZWRlZlxuICAgICAgICBjb25zdCBpbWdFbCA9IHRoaXMuX3JlbmRlcmVyLmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgIGltZ0VsLmFuaW1hdGUoW3sgdHJhbnNmb3JtOiAncm90YXRlKDM2MGRlZyknIH0sIHsgdHJhbnNmb3JtOiAncm90YXRlKDBkZWcpJyB9XSwgcm90YXRlKTtcblxuICAgICAgICB0aGlzLl9yZW5kZXJlci5hcHBlbmRDaGlsZCh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCB0aGlzLmxvYWRlckVsKTtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy5sb2FkZXJFbCwgaW1nRWwpO1xuXG4gICAgICAgIHRoaXMuX3NldFN0eWxlcyh0aGlzLl9lbC5uYXRpdmVFbGVtZW50LCBob3N0U3R5bGVzKTtcbiAgICAgICAgdGhpcy5fc2V0U3R5bGVzKHRoaXMubG9hZGVyRWwsIGxvYWRlclN0eWxlcyk7XG4gICAgICAgIHRoaXMuX3NldFN0eWxlcyhpbWdFbCwgaW1nU3R5bGVzKTtcblxuICAgICAgICBpZiAoIWltZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEF0dHJpYnV0ZShpbWdFbCwgJ3NyYycsIGltZyk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfc2V0U3R5bGVzKGVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzdHlsZXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gfCB1bmRlZmluZWQpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFzdHlsZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRTdHlsZShlbGVtZW50LCBrZXksIHN0eWxlc1trZXldKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19